{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","asc","location","useLocation","history","useHistory","isAscendingSorted","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","DUMMY_QUOTES","AllQuotes","useHttp","getAllQuotes","status","data","sendRequest","error","content","length","useEffect","Fragment"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,iGCkB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBCsCSO,EAnCG,SAACR,GACjB,IAVkBS,EAAQC,EAUpBC,EAAWC,cACXC,EAAUC,cAEVC,EAAgD,QADlC,IAAIC,gBAAgBL,EAASM,QACXC,IAAI,QAQpCC,GArBYV,EAqBcT,EAAMS,OArBZC,EAqBoBK,EApBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE/Bc,EAAOd,GAAKe,EAAOf,IAAM,EAAI,MAkBtC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAZQ,WACpBX,EAAQY,KAAK,CACXC,SAAUf,EAASe,SACnBT,OAAO,SAAD,OAAWF,EAAoB,OAAS,UAS5C,kBACQA,EAAoB,aAAe,iBAG7C,oBAAId,UAAWC,IAAQyB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,a,wBClCnBuB,EAAe,GA6BJC,UA5BG,SAAC/B,GACjB,MAA6CgC,YAAQC,KAA7CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,YAAaC,EAAnC,EAAmCA,MAC/BC,EAAU,cAAC,EAAD,CAAW7B,OAAQqB,IAuBjC,MAtBe,cAAXI,GACFJ,EAAeK,EACF,OAATA,GAAyC,IAAxBL,EAAaS,QAChCD,EACE,qBAAKrC,UAAU,UAAf,SACE,iEAGAoC,IACFC,EACE,qBAAKrC,UAAU,UAAf,SACE,6BAAKoC,QAINC,EAAU,cAAC,EAAD,CAAW7B,OAAQqB,KAEpCQ,EAAU,cAAC,IAAD,IAEZE,qBAAU,WACRJ,MACC,CAACA,IACG,cAAC,IAAMK,SAAP,UAAiBH","file":"static/js/5.6931a650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__fP8bX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3S7W8\",\"sorting\":\"QuoteList_sorting__2XXzo\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, asc) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (asc) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    }\n    return quoteA.id > quoteB.id ? -1 : 1;\n  });\n};\n\nconst QuoteList = (props) => {\n  const location = useLocation();\n  const history = useHistory();\n  const queryParams = new URLSearchParams(location.search);\n  const isAscendingSorted = queryParams.get(\"sort\") === \"asc\";\n  const ascendingSort = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isAscendingSorted ? \"desc\" : \"asc\"}`,\n    });\n  };\n\n  const sortedQuotes = sortQuotes(props.quotes, isAscendingSorted);\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={ascendingSort}>\n          Sort {isAscendingSorted ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import React, { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport LoadSpinner from \"../components/UI/LoadingSpinner\";\r\nlet DUMMY_QUOTES = [];\r\nconst AllQuotes = (props) => {\r\n  const { status, data, sendRequest, error } = useHttp(getAllQuotes);\r\n  let content = <QuoteList quotes={DUMMY_QUOTES} />;\r\n  if (status === \"completed\") {\r\n    DUMMY_QUOTES = data;\r\n    if (data === null || DUMMY_QUOTES.length === 0) {\r\n      content = (\r\n        <div className=\"centerd\">\r\n          <h2>No Quotes...!! Add some quote</h2>\r\n        </div>\r\n      );\r\n      if (error) {\r\n        content = (\r\n          <div className=\"centerd\">\r\n            <h2>{error}</h2>\r\n          </div>\r\n        );\r\n      }\r\n    } else content = <QuoteList quotes={DUMMY_QUOTES} />;\r\n  } else {\r\n    content = <LoadSpinner />;\r\n  }\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n  return <React.Fragment>{content}</React.Fragment>;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}