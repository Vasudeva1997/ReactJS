{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","NewCommentForm","commentTextRef","useRef","params","useParams","useHttp","addComment","sendRequest","status","submitFormHandler","event","preventDefault","comment","commentData","current","value","quoteId","quoteID","id","Math","random","Fragment","LoadingSpinner","form","onSubmit","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","comments","setComments","getAllComments","statusC","data","useEffect","prevState","concat","map","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/4.97cba2ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__cRRfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1X30m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__EAuYb\",\"loading\":\"NewCommentForm_loading__2Sp-c\",\"control\":\"NewCommentForm_control__39tuU\",\"actions\":\"NewCommentForm_actions__f-V-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1rEGW\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import {  useRef } from \"react\";\nimport {  useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport React from \"react\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const params = useParams();\n  const { sendRequest, status } = useHttp(addComment);\n  // useEffect(() => {\n  //   if (status === \"completed\") {\n  //     history.replace(location.pathname);\n  //   }\n  // }, [status, history, location]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    let comment = {\n      commentData: commentTextRef.current.value,\n      quoteId: params.quoteID,\n      id: \"key\" + Math.random(),\n      text: commentTextRef.current.value,\n    };\n    sendRequest(comment);\n    props.addComment(comment);\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <React.Fragment>\n      {status === \"pending\" && <LoadingSpinner />}\n      {status !== \"pending\" && (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n          <div className={classes.control} onSubmit={submitFormHandler}>\n            <label htmlFor=\"comment\">Your Comment</label>\n            <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\">Add Comment</button>\n          </div>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NewCommentForm;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport CommentItem from \"./CommentItem\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  // let comments = [];\n  const [comments, setComments] = useState([]);\n  const params = useParams();\n\n  const { sendRequest, status: statusC, data } = useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(params.quoteID);\n  }, [sendRequest, params]);\n  const addComment = (comment) => {\n    setComments((prevState) => {\n      return prevState.concat(comment)\n    });\n  };\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  useEffect(() => {\n    if (statusC === \"completed\") {\n      setComments(data);\n    }\n  }, [data, statusC]);\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {isAddingComment && <NewCommentForm addComment={addComment} />}\n      {comments.map((comment) => {\n        return <CommentItem key={comment.id} text={comment.text} />;\n      })}\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      <p>Comments...</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n// const DUMMY_QUOTES = [\r\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\r\n//   { id: \"q2\", author: \"Maximilian\", text: \"Learning React is great!\" },\r\n// ];\r\nconst QuoteDetail = (props) => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const { sendRequest, status, data } = useHttp(getSingleQuote);\r\n  useEffect(() => {\r\n    sendRequest(params.quoteID);\r\n  }, [sendRequest, params]);\r\n  const quote = data;\r\n  console.log(match);\r\n  if(status === \"pending\"){\r\n    return <LoadingSpinner/>\r\n  }\r\n  if (quote === null) return <p>No Quote Found...!!</p>;\r\n  return (\r\n    <React.Fragment>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`}>\r\n            <button className=\"btn--flat\"> Load Comments</button>\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments  />\r\n      </Route>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}